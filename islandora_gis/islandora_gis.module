<?php

  /**
   * @file Core hook implementations and functionality for GIS Content
   * @author griffinj@lafayette.edu
   *
   */

  /**
   * Implements hook_islandora_required_objects().
   *
   * @param IslandoraTuque $connection Tuque instance for Fedora Commons
   * @return type
   */
function islandora_gis_islandora_required_objects(IslandoraTuque $connection) {

  $module_path = drupal_get_path('module', 'islandora_gis');

  // GIS Content Model
  $gis_content_model = $connection->repository->constructObject('islandora:sp_shapefile_cmodel');
  $gis_content_model->owner = 'fedoraAdmin';
  $gis_content_model->label = 'Islandora GIS Content Model';
  $gis_content_model->models = 'fedora-system:ContentModel-3.0';

  // ISLANDORACM Datastream
  $datastream = $gis_content_model->constructDatastream('ISLANDORACM', 'X');
  $datastream->label = 'Islandora content model';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_sp_shapefile_cmodel.xml", FALSE);
  $gis_content_model->ingestDatastream($datastream);

  // DS-COMPOSITE-MODEL Datastream
  $datastream = $gis_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_shapefile_ds_composite_model.xml", FALSE);
  $gis_content_model->ingestDatastream($datastream);

  // Esri Shapefile Collection
  $gis_collection = $connection->repository->constructObject('islandora:sp_shapefile_collection');
  $gis_collection->owner = 'fedoraAdmin';
  $gis_collection->label = 'Esri Shapefile Collection';
  $gis_collection->models = 'islandora:collectionCModel';
  $gis_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  // Collection Policy Datastream
  $datastream = $gis_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_shapefile_collection_policy.xml", FALSE);
  $gis_collection->ingestDatastream($datastream);

  // TN Datastream
  $datastream = $gis_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $gis_collection->ingestDatastream($datastream);

  return array(
    'islandora_gis' => array(
      'title' => 'Islandora GIS',
      'objects' => array(
        $gis_content_model,
        $gis_collection,
      )
    )
  );
}

/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called (the pids
 * colon should be replaced with a dash)
 *
 * @return array
 */
function islandora_gis_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_gis' => array(
      'variables' => array('islandora_object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-gis',
      /**
       * We can add pids to the end of this pattern in our preprocess function and templates
       * will be able to have have a pid appended to the template name to overide a template on a per object basis
       * an example template would be named islandora-gis--islandora-27.tpl.phps
       */
      'pattern' => 'islandora_gis__',
    ),
  );
}

/**
 * Load layers from geoserver
 * @todo Refactor
 * @see geoserver_openlayers_layers()
 *
 */
function islandora_gis_layer_load_geoserver($object) {

  $ol_layers = array();
  $gs_layers = geoserver_layers_load();
  $gs_styles = geoserver_styles();
  $url = geoserver_url();
  $workspace = variable_get('geoserver_workspace', '');

  foreach (array_values($gs_layers) as $gs_layer) {

    if (!isset($gs_layer->data['openlayers'])) {
      // Layer has no OpenLayers configuration --> skip the layer
      continue;
    }
    $openlayers = $gs_layer->data['openlayers'];

    if ($openlayers['gwc']) {
      $data = isset($openlayers['gwc_data']) ? $openlayers['gwc_data'] : array();
      $ol_layer = new stdClass();
      $ol_layer->api_version = 1;
      $ol_layer->name = $gs_layer->name . '_gwc';
      $ol_layer->title = $gs_layer->title;
      $ol_layer->description = t('Cached WMS layer of GeoServer layer !name',
				 array('!name' => $gs_layer->name));
      $ol_layer->data = array(
			      'layer_type' => 'openlayers_layer_type_wms',
			      'base_url' => $url . 'gwc/service/wms',
			      'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
			      'projection' => isset($data['projection']) ? $data['projection'] : array('EPSG:900913', 'EPSG:3857'),
			      'params' => array(
						'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
						'buffer' => '2',
						'ratio' => '1.5',
						'singleTile' => 0,
						),
			      'options' => array(
						 'TRANSPARENT' => 'true',
						 'exceptions' => 'application/vnd.ogc.se_inimage',
						 'format' => 'image/png',
						 'layers' => array($workspace . ':' . $gs_layer->name),
						 'styles' => '',
						 ),
			      );
      $ol_layers[$ol_layer->name] = $ol_layer;
    }

    if ($openlayers['wfs']) {
      $style = $gs_layer->data['style'];
      $sld = isset($gs_styles[$style]) ? $gs_styles[$style]->data : '';
      $data = isset($openlayers['wfs_data']) ? $openlayers['wfs_data'] : array();
      $ol_layer = new stdClass();
      $ol_layer->api_version = 1;
      $ol_layer->name = $gs_layer->name . '_wfs';
      $ol_layer->title = $gs_layer->title;
      $ol_layer->description = t('WFS layer of GeoServer layer !name',
				 array('!name' => $gs_layer->name));
      $ol_layer->data = array(
			      'attribution' =>  isset($gs_layer->data['attribution']) ? $gs_layer->data['attribution'] : NULL,
			      'layer_type' => 'openlayers_layer_type_geoserver_wfs',
			      'sld' => $sld,
			      'url' => $url . $workspace . '/ows',
			      'typeName' => $workspace . ':' . $gs_layer->name,
			      'strategy' => isset($data['strategy']) ? $data['strategy'] : 'bbox',
			      'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
			      'projection' => isset($data['projection']) ? $data['projection'] : array('EPSG:900913', 'EPSG:3857'),
			      );
      $ol_layers[$ol_layer->name] = $ol_layer;
    }

    if ($openlayers['wms']) {
      $data = isset($openlayers['wms_data']) ? $openlayers['wms_data'] : array();
      $ol_layer = new stdClass();
      $ol_layer->api_version = 1;
      $ol_layer->name = $gs_layer->name . '_wms';
      $ol_layer->title = $gs_layer->title;
      $ol_layer->description = t('Untiled WMS layer of GeoServer layer !name',
          array('!name' => $gs_layer->name));
      $ol_layer->data = array(
        'layer_type' => 'openlayers_layer_type_wms',
        'geoserver_wms' => TRUE,
        'base_url' => $url . 'wms',
        'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
        'projection' => isset($data['projection']) ? $data['projection'] : array('EPSG:900913', 'EPSG:3857'),
        'params' => array(
          'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
          'buffer' => '2',
          'ratio' => '1.5',
          'singleTile' => 1,
        ),
        'options' => array(
          'TRANSPARENT' => 'true',
          'exceptions' => 'application/vnd.ogc.se_inimage',
          'format' => 'image/png',
          'layers' => array($workspace . ':' . $gs_layer->name),
          'styles' => '',
        ),
      );
      $ol_layers[$ol_layer->name] = $ol_layer;
    }
  }

  return $ol_layers;
}

function islandora_gis_layer_load_geojson($object) {

  $layer_title = $object->label;
  $layer_name = preg_replace('/\s/', '_', strtolower($map_title));

  $geojson_data = $object['JSON']->content;
  
  // GeoJSON example with direct data
  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = $layer_name;
  $layer->title = $layer_title;
  $layer->description = t('Example that puts GeoJSON directly in layer without Views.');
  $layer->data = array(
    'resolutions' => openlayers_get_resolutions('EPSG:900913'),
    'serverResolutions' => openlayers_get_resolutions('EPSG:4326'),
    'layer_type' => 'openlayers_layer_type_geojson',
    'layer_handler' => 'geojson',
    'projection' => array('EPSG:4326'),
    'isBaseLayer' => FALSE,
    'vector' => TRUE,
    'geojson_data' => $geojson_data
  );

  return $layer;
}

/**
 * Generate an OpenLayers Map Object from an Islandora Object
 * @param FedoraObject $object
 *
 */
function islandora_gis_map_load($object, $map_desc_xpath = NULL) {

  $map_title = $object->label;
  $map_name = preg_replace('/\s/', '_', strtolower($map_title));
  
  if($map_desc_xpath) {

    /**
     * @todo Implement functionality for mapping an individual MODS Document XPath for the description of the map
     *
     */
    $map_description = $map_title;
  } else {

    $map_description = $map_title;
  }

  // Example map with MapQuest and GeoJSON
  $openlayers_maps = new stdClass();
  $openlayers_maps->disabled = FALSE; /* Edit this to true to make a default openlayers_maps disabled initially */
  $openlayers_maps->api_version = 1;
  $openlayers_maps->name = $map_name;
  $openlayers_maps->title = $map_title;
  $openlayers_maps->description = $map_description;

  $image_path = drupal_get_path('module', 'openlayers') . '/themes/default_dark/img/';
  $css_path = drupal_get_path('module', 'openlayers') . '/themes/default_dark/style.css';

  $center = array('initial' => array(
				     'centerpoint' => '0,0',
				     'zoom' => '2',
				     ),
		  'restrict' => array(
				      'restrictextent' => 0,
				      'restrictedExtent' => '',
				      ),
		  );

  $behaviors = array('openlayers_behavior_keyboarddefaults' => array(),
		     'openlayers_behavior_layerswitcher' => array('ascending' => 1,
								 'sortBaseLayer' => '0',
								 'roundedCorner' => 1,
								 'roundedCornerColor' => '#222222',
								 'maximizeDefault' => 0,
								  ),
		     'openlayers_behavior_navigation' => array(
							      'zoomWheelEnabled' => 1,
							      'zoomBoxEnabled' => 1,
							      'documentDrag' => 0,
							       ),
		     'openlayers_behavior_panzoombar' => array(
							      'zoomWorldIcon' => 0,
							      'panIcons' => 1,
							       ),
		     'openlayers_behavior_popup' => array(
							 'layers' => array(
									   'openlayers_geojson_picture_this' => 'openlayers_geojson_picture_this',
									   ),
							 'panMapIfOutOfView' => 0,
							 'keepInMap' => 1,
							  ),
		     'openlayers_behavior_zoomtolayer' => array(
							       'zoomtolayer' => array(
										      'openlayers_geojson_picture_this' => 'openlayers_geojson_picture_this',
										      ),
							       'point_zoom_level' => '5',
							       'zoomtolayer_scale' => '1',
								),
		     );

  $layers = array(
		  'mapquest_osm' => 'mapquest_osm',
		  'mapquest_openaerial' => 'mapquest_openaerial',
		  'openlayers_geojson_picture_this' => 'openlayers_geojson_picture_this',
		  );
  $default_layer = 'openlayers_geojson_picture_this';

  $openlayers_maps->data = array(
				 'width' => 'auto',
				 'height' => '400px',
				 'image_path' => $image_path,
				 'css_path' => $css_path,
				 'proxy_host' => '',
				 'hide_empty_map' => 0,
				 'center' => $center,
				 'behaviors' => $behaviors,
				 'default_layer' => $default_layer,
				 'layers' => $layers,
				 'layer_activated' => array(
							    'openlayers_geojson_picture_this' => 'openlayers_geojson_picture_this',
							    ),
				 'projection' => 'EPSG:3857',
				 'displayProjection' => 'EPSG:4326',
				 'styles' => array(
						   'default' => 'default',
						   'select' => 'default_select',
						   'temporary' => 'default',
						   ),
				 );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 *
 */
function islandora_gis_islandora_sp_shapefile_cmodel_islandora_view_object($object) {

  $map = islandora_gis_map_load($object);

  $map_output = openlayers_render_map_data($map);

  $output = theme('islandora_gis', array('islandora_object' => $object, 'islandora_content' => $map_output));
  return array('' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 *
 */
function islandora_gis_islandora_sp_shapefile_cmodel_islandora_object_ingested($object) {

  /**
   * @todo Implement functionality for operations after the ingestion of the object
   *
   */
}
