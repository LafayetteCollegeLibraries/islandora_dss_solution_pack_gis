<?php

  /**
   * @file Core hook implementations and functionality for GIS Content
   * @author griffinj@lafayette.edu
   *
   */

$module_path = drupal_get_path('module', 'islandora_gis');
@include_once "$module_path/vendor/autoload.php";
@include_once "$module_path/libraries/ShapefileProcessor.php";
@include_once "$module_path/libraries/FgdcProcessor.php";

  /**
   * Implements hook_islandora_required_objects().
   *
   * @param IslandoraTuque $connection Tuque instance for Fedora Commons
   * @return type
   */
function islandora_gis_islandora_required_objects(IslandoraTuque $connection) {

  $module_path = drupal_get_path('module', 'islandora_gis');

  // GIS Content Model
  $gis_content_model = $connection->repository->constructObject('islandora:sp_shapefile_cmodel');
  $gis_content_model->owner = 'fedoraAdmin';
  $gis_content_model->label = 'Islandora GIS Content Model';
  $gis_content_model->models = 'fedora-system:ContentModel-3.0';

  // ISLANDORACM Datastream
  $datastream = $gis_content_model->constructDatastream('ISLANDORACM', 'X');
  $datastream->label = 'Islandora content model';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_sp_shapefile_cmodel.xml", FALSE);
  $gis_content_model->ingestDatastream($datastream);

  // DS-COMPOSITE-MODEL Datastream
  $datastream = $gis_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_shapefile_ds_composite_model.xml", FALSE);
  $gis_content_model->ingestDatastream($datastream);

  // Esri Shapefile Collection
  $gis_collection = $connection->repository->constructObject('islandora:sp_shapefile_collection');
  $gis_collection->owner = 'fedoraAdmin';
  $gis_collection->label = 'Esri Shapefile Collection';
  $gis_collection->models = 'islandora:collectionCModel';
  $gis_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  // Collection Policy Datastream
  $datastream = $gis_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_shapefile_collection_policy.xml", FALSE);
  $gis_collection->ingestDatastream($datastream);

  // TN Datastream
  $datastream = $gis_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $gis_collection->ingestDatastream($datastream);

  return array(
    'islandora_gis' => array(
      'title' => 'Islandora GIS',
      'objects' => array(
        $gis_content_model,
        $gis_collection,
      )
    )
  );
}

/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called (the pids
 * colon should be replaced with a dash)
 *
 * @return array
 */
function islandora_gis_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_gis' => array(
      'variables' => array('islandora_object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-gis',
      /**
       * We can add pids to the end of this pattern in our preprocess function and templates
       * will be able to have have a pid appended to the template name to overide a template on a per object basis
       * an example template would be named islandora-gis--islandora-27.tpl.phps
       */
      'pattern' => 'islandora_gis__',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 *
 */
function islandora_gis_islandora_sp_shapefile_cmodel_islandora_view_object($object) {

  module_load_include('inc', 'islandora_gis', 'includes/openlayers');

  $map = islandora_gis_map_load($object);

  $map_output = islandora_gis_render_map_data($map);

  $output = theme('islandora_gis', array('islandora_object' => $object, 'islandora_content' => $map_output));
  return array('' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 *
 */
function islandora_gis_islandora_sp_shapefile_cmodel_islandora_object_ingested($object) {

  $ogr2ogr_bin_path = variable_get('islandora_gis_ogr2ogr_path', '/usr/bin/env ogr2ogr');
  //$topojson_bin_path = drupal_get_path('module', 'islandora_gis') . '/libraries/js/node_modules/topojson/bin/topojson';
  $topojson_bin_path = dirname(__DIR__) . '/islandora_gis/libraries/js/node_modules/topojson/bin/topojson';
  $geojson_bin_path = dirname(__DIR__) . '/islandora_gis/libraries/js/node_modules/topojson/bin/topojson-geojson';

  /**
   * Temporarily disabling integration with mapshaper due to issue GEO-37
   *
   */
  //$mapshaper_bin_path = dirname(__DIR__) . '/islandora_gis/libraries/js/node_modules/mapshaper/bin/mapshaper';
  //$processor = new ShapefileObjectProcessor($object, NULL, $ogr2ogr_bin_path, $topojson_bin_path, $mapshaper_bin_path);
  $processor = new ShapefileObjectProcessor($object, NULL, $ogr2ogr_bin_path, $topojson_bin_path, $geojson_bin_path);

  // Manually invoke the ShapefileProcessor methods for non-existent derivative datastreams
  foreach(array('GML' => 'Geography Markup Language',
		'KML' => 'Keyhole Markup Language',
		'JSON' => 'GeoJson') as $dsid => $ds_label) {

    if(!isset($object[$dsid])) {

      $datastream_file = $processor->derive($dsid);

      $control_group = 'M';
      $mimetype = '';

      $label = $object->label . " ($ds_label)";

      // If this is an XML Document, set the datastream type to "Inline [X]ML"
      if(preg_match('/\.xml$/', $datastream_file)) {

	$control_group = 'X';
	$mimetype = 'application/xml';
	if(preg_match('/\.gml\.xml$/', $datastream_file)) {

	  $mimetype = 'application/gml+xml';
	} elseif(preg_match('/\.kml\.xml$/', $datastream_file)) {

	  $mimetype = 'application/vnd.google-earth.kml+xml';
	}
      } elseif(preg_match('/\.geojson\.json$/', $datastream_file)) {

	$mimetype = 'application/vnd.geo+json';
      }

      // @see islandora_prepare_new_object().
      $datastream = $object->constructDatastream($dsid, $control_group);
      $datastream->label = $label;
      $datastream->mimetype = $mimetype;

      $is_valid_url = filter_var($datastream_file, FILTER_VALIDATE_URL) === TRUE;

      switch ($control_group) {

      case 'M':
	if($is_valid_url) {

	  $datastream->setContentFromUrl($datastream_file);
	} else {

	  $datastream->setContentFromFile($datastream_file);
	}
	break;

      case 'X':

	$datastream->setContentFromString(file_get_contents($datastream_file));
	break;
      }

      try {

	$object->ingestDatastream($datastream);
      } catch (Exception $e) {

	watchdog('islandora_gis', $e->getMessage(), NULL, WATCHDOG_ERROR);
	drupal_set_message(t('A problem occured while ingesting the datastream "@label" for @pid, please notify the administrator.', array('@label' => $label, '@pid' => $object->id)), 'error');
      }
    }
  }

  // For the FGDC metadata transformation
  $fgdc_ds = $object['FGDC'];
  if(isset($fgdc_ds)) {
    
    $xsl_file_path = dirname(__DIR__) . '/islandora_gis/libraries/xsl/fgdc2mods.xsl';
    $processor = new FgdcDatastreamProcessor($fgdc_ds, $xsl_file_path);
    $mods_file = $processor->transform();

    // @see islandora_prepare_new_object().
    $datastream = $object->constructDatastream('MODS', 'X');
    $datastream->label = 'MODS Document';
    $datastream->mimetype = 'application/xml';
    $datastream->setContentFromFile($mods_file);
    try {

      $object->ingestDatastream($datastream);
    } catch (Exception $e) {
      
      watchdog('islandora_gis', $e->getMessage(), NULL, WATCHDOG_ERROR);
      drupal_set_message(t('A problem occured while ingesting the datastream "@label" for @pid, please notify the administrator.', array('@label' => $label, '@pid' => $object->id)), 'error');
    }

    file_unmanaged_delete($mods_file);
  }
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_gis_islandora_xml_form_builder_forms() {

  $module_path = drupal_get_path('module', 'islandora_gis');
  return array(
	       'Shapefile MODS-OGP form' => array(
						  'form_file' => "$module_path/xml/islandora_shapefile_mods_form.xml",
						  ),
	       );
}

/**
 * Implements hook_islandora_content_model_forms_form_associations().
 *
 */
function islandora_gis_islandora_content_model_forms_form_associations() {

  return array('islandora_shapefile_mods_form' => array('content_model' => 'islandora:sp_shapefile_cmodel',
							'form_name' => 'Shapefile MODS-OGP form',
							'dsid' => 'MODS',
							'title_field' => array('titleInfo', 'title'),
							'transform' => 'mods_to_dc.xsl',
							'template' => FALSE,
							),
	       );
}
