<?php

  /**
   * @file Core hook implementations and functionality for GIS Content
   * @author griffinj@lafayette.edu
   *
   */

$module_path = drupal_get_path('module', 'islandora_gis');
@include_once "$module_path/vendor/autoload.php";
@include_once "$module_path/libraries/ShapefileProcessor.php";


  /**
   * Implements hook_islandora_required_objects().
   *
   * @param IslandoraTuque $connection Tuque instance for Fedora Commons
   * @return type
   */
function islandora_gis_islandora_required_objects(IslandoraTuque $connection) {

  $module_path = drupal_get_path('module', 'islandora_gis');

  // GIS Content Model
  $gis_content_model = $connection->repository->constructObject('islandora:sp_shapefile_cmodel');
  $gis_content_model->owner = 'fedoraAdmin';
  $gis_content_model->label = 'Islandora GIS Content Model';
  $gis_content_model->models = 'fedora-system:ContentModel-3.0';

  // ISLANDORACM Datastream
  $datastream = $gis_content_model->constructDatastream('ISLANDORACM', 'X');
  $datastream->label = 'Islandora content model';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_sp_shapefile_cmodel.xml", FALSE);
  $gis_content_model->ingestDatastream($datastream);

  // DS-COMPOSITE-MODEL Datastream
  $datastream = $gis_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_shapefile_ds_composite_model.xml", FALSE);
  $gis_content_model->ingestDatastream($datastream);

  // Esri Shapefile Collection
  $gis_collection = $connection->repository->constructObject('islandora:sp_shapefile_collection');
  $gis_collection->owner = 'fedoraAdmin';
  $gis_collection->label = 'Esri Shapefile Collection';
  $gis_collection->models = 'islandora:collectionCModel';
  $gis_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  // Collection Policy Datastream
  $datastream = $gis_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_shapefile_collection_policy.xml", FALSE);
  $gis_collection->ingestDatastream($datastream);

  // TN Datastream
  $datastream = $gis_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $gis_collection->ingestDatastream($datastream);

  return array(
    'islandora_gis' => array(
      'title' => 'Islandora GIS',
      'objects' => array(
        $gis_content_model,
        $gis_collection,
      )
    )
  );
}

/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called (the pids
 * colon should be replaced with a dash)
 *
 * @return array
 */
function islandora_gis_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_gis' => array(
      'variables' => array('islandora_object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-gis',
      /**
       * We can add pids to the end of this pattern in our preprocess function and templates
       * will be able to have have a pid appended to the template name to overide a template on a per object basis
       * an example template would be named islandora-gis--islandora-27.tpl.phps
       */
      'pattern' => 'islandora_gis__',
    ),
  );
}

/**
 * Load layers from geoserver
 * @todo Refactor
 * @see geoserver_openlayers_layers()
 *
 */
function islandora_gis_layer_load_geoserver($object) {

  $ol_layers = array();
  $gs_layers = geoserver_layers_load();
  $gs_styles = geoserver_styles();
  $url = geoserver_url();
  $workspace = variable_get('geoserver_workspace', '');

  foreach (array_values($gs_layers) as $gs_layer) {

    if (!isset($gs_layer->data['openlayers'])) {
      // Layer has no OpenLayers configuration --> skip the layer
      continue;
    }
    $openlayers = $gs_layer->data['openlayers'];

    if ($openlayers['gwc']) {
      $data = isset($openlayers['gwc_data']) ? $openlayers['gwc_data'] : array();
      $ol_layer = new stdClass();
      $ol_layer->api_version = 1;
      $ol_layer->name = $gs_layer->name . '_gwc';
      $ol_layer->title = $gs_layer->title;
      $ol_layer->description = t('Cached WMS layer of GeoServer layer !name',
				 array('!name' => $gs_layer->name));
      $ol_layer->data = array(
			      'layer_type' => 'openlayers_layer_type_wms',
			      'base_url' => $url . 'gwc/service/wms',
			      'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
			      'projection' => isset($data['projection']) ? $data['projection'] : array('EPSG:900913', 'EPSG:3857'),
			      'params' => array(
						'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
						'buffer' => '2',
						'ratio' => '1.5',
						'singleTile' => 0,
						),
			      'options' => array(
						 'TRANSPARENT' => 'true',
						 'exceptions' => 'application/vnd.ogc.se_inimage',
						 'format' => 'image/png',
						 'layers' => array($workspace . ':' . $gs_layer->name),
						 'styles' => '',
						 ),
			      );
      $ol_layers[$ol_layer->name] = $ol_layer;
    }

    if ($openlayers['wfs']) {
      $style = $gs_layer->data['style'];
      $sld = isset($gs_styles[$style]) ? $gs_styles[$style]->data : '';
      $data = isset($openlayers['wfs_data']) ? $openlayers['wfs_data'] : array();
      $ol_layer = new stdClass();
      $ol_layer->api_version = 1;
      $ol_layer->name = $gs_layer->name . '_wfs';
      $ol_layer->title = $gs_layer->title;
      $ol_layer->description = t('WFS layer of GeoServer layer !name',
				 array('!name' => $gs_layer->name));
      $ol_layer->data = array(
			      'attribution' =>  isset($gs_layer->data['attribution']) ? $gs_layer->data['attribution'] : NULL,
			      'layer_type' => 'openlayers_layer_type_geoserver_wfs',
			      'sld' => $sld,
			      'url' => $url . $workspace . '/ows',
			      'typeName' => $workspace . ':' . $gs_layer->name,
			      'strategy' => isset($data['strategy']) ? $data['strategy'] : 'bbox',
			      'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
			      'projection' => isset($data['projection']) ? $data['projection'] : array('EPSG:900913', 'EPSG:3857'),
			      );
      $ol_layers[$ol_layer->name] = $ol_layer;
    }

    if ($openlayers['wms']) {
      $data = isset($openlayers['wms_data']) ? $openlayers['wms_data'] : array();
      $ol_layer = new stdClass();
      $ol_layer->api_version = 1;
      $ol_layer->name = $gs_layer->name . '_wms';
      $ol_layer->title = $gs_layer->title;
      $ol_layer->description = t('Untiled WMS layer of GeoServer layer !name',
          array('!name' => $gs_layer->name));
      $ol_layer->data = array(
        'layer_type' => 'openlayers_layer_type_wms',
        'geoserver_wms' => TRUE,
        'base_url' => $url . 'wms',
        'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
        'projection' => isset($data['projection']) ? $data['projection'] : array('EPSG:900913', 'EPSG:3857'),
        'params' => array(
          'isBaseLayer' => isset($data['isBaseLayer']) ? $data['isBaseLayer'] : FALSE,
          'buffer' => '2',
          'ratio' => '1.5',
          'singleTile' => 1,
        ),
        'options' => array(
          'TRANSPARENT' => 'true',
          'exceptions' => 'application/vnd.ogc.se_inimage',
          'format' => 'image/png',
          'layers' => array($workspace . ':' . $gs_layer->name),
          'styles' => '',
        ),
      );
      $ol_layers[$ol_layer->name] = $ol_layer;
    }
  }

  return $ol_layers;
}

function islandora_gis_layer_load_kml($object) {

  $layer_title = $object->label;
  $layer_name = preg_replace('/\s/', '_', strtolower($layer_title));

  $kml_data = '<?xml version="1.0" encoding="UTF-8"?>' . $object['KML']->content;

  /* Example with KML layer */
  $layer = new stdClass();
  $layer->disabled = FALSE; /* Edit this to true to make a default openlayers_layers disabled initially */
  $layer->api_version = 1;
  $layer->name = $layer_name;
  $layer->title = $layer_title;
  $layer->description = 'A simple example of KML Layer Type.';
  $layer->data = array(
    'method' => 'raw',
    'raw' => $kml_data,
    'formatOptions' => array(
      'extractStyles' => TRUE,
      'extractTracks' => FALSE,
      'extractAttributes' => TRUE,
    ),
    'projection' => array(
      'EPSG:4326',
    ),
    'isBaseLayer' => FALSE,
    'layer_type' => 'openlayers_layer_type_kml',
    'layer_handler' => 'kml',
    'vector' => TRUE,
    'title' => $layer_title, //@todo Resolve by integrating with the class
  );

  return $layer;
}

/**
 * Generate a layer from the JSON Datastream content within an Islandora Object
 * @param FedoraObject $object
 * @returns array layer
 */
function islandora_gis_layer_load_geojson($object) {

  $layer_title = $object->label;
  $layer_name = preg_replace('/\s/', '_', strtolower($layer_title));

  $geojson_data = $object['JSON']->content;
  
  // GeoJSON example with direct data
  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = $layer_name;
  $layer->title = $layer_title;
  $layer->description = t('Example that puts GeoJSON directly in layer without Views.');
  $layer->data = array(
    'resolutions' => openlayers_get_resolutions('EPSG:900913'),
    'serverResolutions' => openlayers_get_resolutions('EPSG:4326'),
    'layer_type' => 'openlayers_layer_type_geojson',
    'layer_handler' => 'geojson',
    'projection' => array('EPSG:4326'),
    'isBaseLayer' => FALSE,
    'vector' => TRUE,
    'geojson_data' => $geojson_data,
    'useBBOX' => FALSE,
    'title' => $layer_title, //@todo Resolve by integrating with the class
  );

  return $layer;
}

/**
 * Generate an OpenLayers Map Object from an Islandora Object
 * @param FedoraObject $object
 *
 */
function islandora_gis_map_load($object, $map_desc_xpath = NULL) {

  $map_title = $object->label;
  $map_name = preg_replace('/\s/', '_', strtolower($map_title));
  
  if($map_desc_xpath) {

    /**
     * @todo Implement functionality for mapping an individual MODS Document XPath for the description of the map
     *
     */
    $map_description = $map_title;
  } else {

    $map_description = $map_title;
  }

  // Example map with MapQuest and GeoJSON
  $openlayers_maps = new stdClass();
  $openlayers_maps->disabled = FALSE; /* Edit this to true to make a default openlayers_maps disabled initially */
  $openlayers_maps->api_version = 1;
  $openlayers_maps->name = $map_name;
  $openlayers_maps->title = $map_title;
  $openlayers_maps->description = $map_description;

  $image_path = drupal_get_path('module', 'openlayers') . '/themes/default_dark/img/';
  $css_path = drupal_get_path('module', 'openlayers') . '/themes/default_dark/style.css';

  $center = array('initial' => array(
				     'centerpoint' => '0,0',
				     'zoom' => '2',
				     ),
		  'restrict' => array(
				      'restrictextent' => 0,
				      'restrictedExtent' => '',
				      ),
		  );

  $behaviors = array('openlayers_behavior_keyboarddefaults' => array(),
		     'openlayers_behavior_layerswitcher' => array('ascending' => 1,
								 'sortBaseLayer' => '0',
								 'roundedCorner' => 1,
								 'roundedCornerColor' => '#222222',
								 'maximizeDefault' => 0,
								  ),
		     'openlayers_behavior_navigation' => array(
							      'zoomWheelEnabled' => 1,
							      'zoomBoxEnabled' => 1,
							      'documentDrag' => 0,
							       ),
		     'openlayers_behavior_panzoombar' => array(
							      'zoomWorldIcon' => 0,
							      'panIcons' => 1,
							       ),
		     'openlayers_behavior_popup' => array(
							 'layers' => array(

									   'islandora_kml' => 'islandora_kml',
									   ),
							 'panMapIfOutOfView' => 0,
							 'keepInMap' => 1,
							  ),
		     'openlayers_behavior_zoomtolayer' => array(
							       'zoomtolayer' => array(
										      'islandora_geojson' => 'islandora_geojson',
										      'islandora_kml' => 'islandora_kml',
										      ),
							       'point_zoom_level' => '5',
							       'zoomtolayer_scale' => '1',
								),
		     );

  $layers = array(
		  'mapquest_osm' => 'mapquest_osm',
		  'mapquest_openaerial' => 'mapquest_openaerial',
		  //'openlayers_geojson_picture_this' => 'openlayers_geojson_picture_this',
		  'openlayers_kml_example' => 'openlayers_kml_example',
		  );
  $geojson_layer = islandora_gis_layer_load_geojson($object);
  //$layers['islandora_geojson'] = $geojson_layer;
  $kml_layer = islandora_gis_layer_load_kml($object);
  $layers['islandora_kml'] = $kml_layer;

  dpm($layers);

  $default_layer = 'mapquest_osm';

  $openlayers_maps->data = array(
				 'width' => 'auto',
				 'height' => '400px',
				 'image_path' => $image_path,
				 'css_path' => $css_path,
				 'proxy_host' => '',
				 'hide_empty_map' => 0,
				 'center' => $center,
				 'behaviors' => $behaviors,
				 'default_layer' => $default_layer,
				 'layers' => $layers,

				 /*
				 'layer_activated' => array(
							    'islandora_kml' => 'islandora_kml',
							    ),
				 */

				 'projection' => 'EPSG:3857',
				 //'projection' => 'EPSG:4326',
				 'displayProjection' => 'EPSG:4326',
				 'styles' => array(
						   'default' => 'default',
						   'select' => 'default_select',
						   'temporary' => 'default',
						   ),
				 );

  return $openlayers_maps->data;
}

/**
 * Prepare a map for rendering.
 *
 * Takes a map array and builds up the data given the
 * reference to objects like styles, layers, and behaviors.
 *
 * @ingroup openlayers_api
 *
 * @param $map
 *   Array of map settings
 * @return
 *   Filled in map array.
 */
function islandora_gis_build_map($map = array()) {

  // Get the necessary parts
  openlayers_include();
  module_load_include('inc', 'openlayers', 'includes/openlayers.render');

  // If no map is specified, use the default map.
  if (empty($map)) {
    if ($loaded_map = openlayers_map_load(
      variable_get('openlayers_default_map', 'default'))) {
      $map = $loaded_map->data;
    }
  }

  // Create ID for map as this will help with alters.
  $map['id'] = !isset($map['id']) ?
    _openlayers_create_map_id() : $map['id'];

  // Hook to alter map before main processing.  Styles, behaviors,
  // layers may all be added here.
  // hook_openlayers_map_preprocess_alter($map)
  drupal_alter('openlayers_map_preprocess', $map);

  // Styles and layer styles are not required parameters
  $map['styles'] = isset($map['styles']) ? $map['styles'] : array();
  $map['layer_styles'] = isset($map['layer_styles']) ? $map['layer_styles'] : array();
  $map['layer_styles_select'] = isset($map['layer_styles_select']) ? $map['layer_styles_select'] : array();
  $map['layer_styles_temporary'] = isset($map['layer_styles_temporary']) ? $map['layer_styles_temporary'] : array();

  // Process map parts.
  /*
  $map['layers'] = _openlayers_layers_process($map['layers'], $map);
  */

  $islandora_layer = array_pop($map['layers']);
  $map['layers'] = _openlayers_layers_process($map['layers'], $map);
  //$map['layers']['islandora_geojson'] = $islandora_layer;

  $islandora_layer_object = openlayers_get_layer_object($islandora_layer, $map);
  $map['layers']['islandora_kml'] = $islandora_layer_object->data;

  dpm($map['layers']);

  $map['behaviors'] = _openlayers_behaviors_render($map['behaviors'], $map);

  dpm($map['behaviors']);  

  $map['styles'] = _openlayers_styles_process($map['styles'], $map['layer_styles'], $map['layer_styles_select'], $map['layer_styles_temporary'], $map);

  // Restrict map to its projection extent (data outwith cannot be represented).
  // Layer can additionally specfiy their maxExtent in case they use
  // non-default grids.

  $projection = openlayers_get_projection_by_identifier($map['projection']);
  $map['maxExtent'] = $projection->getProjectedExtent();

  dpm($map['layers']);
  
  // In case the layer offers the same projection as the map, use this and do not provide
  // projection definition to client. Otherwise rely on the client to reproject on the fly.
  foreach ($map['layers'] as $layer_name => $layer) {

    if(in_array($map['projection'], $layer['projection'])){
      $map['layers'][$layer_name]['projection'] = $map['projection'];
    } else {

      // Client is able to reproject any possible projection because their definitions need to be
      // known to be able to set up a layer with a certain projection. Thus choice does not matter.
      $layerProjectionIdentifier = reset($layer['projection']);
      if($layerProjectionIdentifier===FALSE){
        throw new Exception(
          t('Layer !title lacks its projection. Please edit it to select a projection.', array(
              '!title' => $layer['title']
          ))
        );
      }
      $map['layers'][$layer_name]['projection'] = $layerProjectionIdentifier;

      //$map['layers'][$layer_name]['projection'] = NULL;
    }

    // Ensure JavaScript gets proper type.
    $map['layers'][$layer_name]['isBaseLayer'] = (boolean)($layer['isBaseLayer']);
  }

  // Hook to alter map one last time.  Final modification to existing
  // styles, behaviors, layers can happen here, but adding new styles,
  // behaviors will not get rendered.
  // hook_openlayers_map_alter($map)
  drupal_alter('openlayers_map', $map);

  // Check map for errors
  $map['errors'] = openlayers_error_check_map($map);
  return $map;
}

/**
 * Render map array
 *
 * Given a map array, render into HTML to display
 * a map.
 *
 * @ingroup openlayers_api
 *
 * @param $map
 *   Associative array of map paramters.
 * @return
 *   Map HTML.
 */
function islandora_gis_render_map_data($map = array()) {

  dpm($map);

  // Run map through build process
  $map = islandora_gis_build_map($map);

  dpm($map);

  $output = '';

  // Given hide_empty_map flag, check if the map has any features
  // defined. If not, assume it is an empty map and shouldn't be displayed.
  if (isset($map['hide_empty_map']) && $map['hide_empty_map'] == TRUE) {
    $empty = TRUE;
    foreach ($map['layers'] as $layer) {
      if (isset($layer['features']) && count($layer['features'])) {
        $empty = FALSE;
      }
    }
    if ($empty) {
      // Abort early because there are no features to display on the map anyway
      return '';
    }
  }

  // Currently the restricted extent of maps is always given in EPSG:3857 so
  // this projection needs to be available in the client for all restricted
  // maps. Using EPSG:4326 instead would likely be better.
  if(array_key_exists('restrict', $map['center']) && (boolean)$map['center']['restrict']['restrictextent']){

    /**
     * Need to assume an arbitrary projection of EPSG:4326
     * @todo Resolve with GeoJSON and OpenStreetMaps base maps
     *
     */
    openlayers_add_js_projection_definition(
      openlayers_get_projection_by_identifier('EPSG:3857')
    );
    /*
    openlayers_add_js_projection_definition(
      openlayers_get_projection_by_identifier('EPSG:4326')
    );
    */
  }

  // Return themed map if no errors found
  if (empty($map['errors'])) {

    // In case the layer offers the same projection as the map, use this and do not provide
    // projection definition to client. Otherwise rely on the client to reproject on the fly.

    foreach ($map['layers'] as $layer_name => $layer) {

      /**
       * Need to assume an arbitrary projection of EPSG:4326
       * @todo Resolve with GeoJSON and OpenStreetMaps base maps
       *
       */
      if(array_key_exists('projection', $map['layers'][$layer_name])) {
      
	//$map['layers'][$layer_name]['projection'] = 'EPSG:4326';
      }

        // Provide client with projection definition so that it can reproject
        openlayers_add_js_projection_definition(
          openlayers_get_projection_by_identifier($map['layers'][$layer_name]['projection'])
        );
    }

    // Ensure projections in use are known to the client (loads Proj4js if required)
    openlayers_add_js_projection_definition(openlayers_get_projection_by_identifier($map['projection']));
    openlayers_add_js_projection_definition(openlayers_get_projection_by_identifier($map['displayProjection']));

    $js = array('openlayers' => array('maps' => array($map['id'] => $map)));
    drupal_add_js($js, 'setting');

    // Push map through theme function and return
    $output = theme('openlayers_map', array(
      'map' => $map,
    ));
  }
  return $output;
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 *
 */
function islandora_gis_islandora_sp_shapefile_cmodel_islandora_view_object($object) {

  $map = islandora_gis_map_load($object);

  //$map_output = openlayers_render_map_data($map);
  //$map_output = openlayers_render_map_data();
  $map_output = islandora_gis_render_map_data($map);

  $output = theme('islandora_gis', array('islandora_object' => $object, 'islandora_content' => $map_output));
  return array('' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 *
 */
function islandora_gis_islandora_sp_shapefile_cmodel_islandora_object_ingested($object) {

  $processor = new ShapefileObjectProcessor($object);

  // Manually invoke the ShapefileProcessor methods for non-existent derivative datastreams
  foreach(array('GML' => 'Geography Markup Language',
		'KML' => 'Keyhole Markup Language',
		'JSON' => 'GeoJson') as $dsid => $ds_label) {

    if(!isset($object[$dsid])) {

      $datastream_file = $processor->derive($dsid);

      $control_group = 'M';
      $mimetype = '';

      $label = $object->label . " ($ds_label)";

      // If this is an XML Document, set the datastream type to "Inline [X]ML"
      if(preg_match('/\.xml$/', $datastream_file)) {

	$control_group = 'X';
	$mimetype = 'application/xml';
	if(preg_match('/\.gml\.xml$/', $datastream_file)) {

	  $mimetype = 'application/gml+xml';
	} elseif(preg_match('/\.kml\.xml$/', $datastream_file)) {

	  $mimetype = 'application/vnd.google-earth.kml+xml';
	}
      } elseif(preg_match('/\.geojson\.json$/', $datastream_file)) {

	$mimetype = 'application/vnd.geo+json';
      }

      // @see islandora_prepare_new_object().
      $datastream = $object->constructDatastream($dsid, $control_group);
      $datastream->label = $label;
      $datastream->mimetype = $mimetype;

      $is_valid_url = filter_var($datastream_file, FILTER_VALIDATE_URL) === TRUE;

      switch ($control_group) {

      case 'M':
	if($is_valid_url) {

	  $datastream->setContentFromUrl($datastream_file);
	} else {

	  $datastream->setContentFromFile($datastream_file);
	}
	break;

      case 'X':

	$datastream->setContentFromString(file_get_contents($datastream_file));
	break;
      }

      try {

	$object->ingestDatastream($datastream);
      } catch (Exception $e) {

	watchdog('islandora_gis', $e->getMessage(), NULL, WATCHDOG_ERROR);
	drupal_set_message(t('A problem occured while ingesting the datastream "@label" for @pid, please notify the administrator.', array('@label' => $label, '@pid' => $object->id)), 'error');
      }
    }
  }
}
