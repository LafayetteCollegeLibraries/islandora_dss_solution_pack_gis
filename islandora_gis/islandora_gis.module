<?php

  /**
   * @file Core hook implementations and functionality for GIS Content
   * @author griffinj@lafayette.edu
   *
   */

$module_path = drupal_get_path('module', 'islandora_gis');
@include_once "$module_path/vendor/autoload.php";
@include_once "$module_path/libraries/ShapefileProcessor.php";
@include_once "$module_path/libraries/FgdcProcessor.php";

module_load_include('inc', 'islandora_gis_geoserver', '/theme/theme');

  /**
   * Implements hook_islandora_required_objects().
   *
   * @param IslandoraTuque $connection Tuque instance for Fedora Commons
   * @return type
   */
function islandora_gis_islandora_required_objects(IslandoraTuque $connection) {

  $module_path = drupal_get_path('module', 'islandora_gis');

  // GIS Content Model
  $gis_content_model = $connection->repository->constructObject('islandora:sp_shapefile_cmodel');
  $gis_content_model->owner = 'fedoraAdmin';
  $gis_content_model->label = 'Islandora GIS Content Model';
  $gis_content_model->models = 'fedora-system:ContentModel-3.0';

  // ISLANDORACM Datastream
  $datastream = $gis_content_model->constructDatastream('ISLANDORACM', 'X');
  $datastream->label = 'Islandora content model';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_sp_shapefile_cmodel.xml", FALSE);
  $gis_content_model->ingestDatastream($datastream);

  // DS-COMPOSITE-MODEL Datastream
  $datastream = $gis_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_shapefile_ds_composite_model.xml", FALSE);
  $gis_content_model->ingestDatastream($datastream);

  // Esri Shapefile Collection
  $gis_collection = $connection->repository->constructObject('islandora:sp_shapefile_collection');
  $gis_collection->owner = 'fedoraAdmin';
  $gis_collection->label = 'Esri Shapefile Collection';
  $gis_collection->models = 'islandora:collectionCModel';
  $gis_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  // Collection Policy Datastream
  $datastream = $gis_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_shapefile_collection_policy.xml", FALSE);
  $gis_collection->ingestDatastream($datastream);

  // TN Datastream
  $datastream = $gis_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $gis_collection->ingestDatastream($datastream);

  return array(
    'islandora_gis' => array(
      'title' => 'Islandora GIS',
      'objects' => array(
        $gis_content_model,
        $gis_collection,
      )
    )
  );
}

/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called (the pids
 * colon should be replaced with a dash)
 *
 * @return array
 */
function islandora_gis_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_gis' => array(
			     'variables' => array('islandora_object' => NULL),
			     'file' => 'theme/theme.inc',
			     'template' => 'theme/islandora-gis',
			     /**
			      * We can add pids to the end of this pattern in our preprocess function and templates
			      * will be able to have have a pid appended to the template name to overide a template on a per object basis
			      * an example template would be named islandora-gis--islandora-27.tpl.phps
			      */
			     'pattern' => 'islandora_gis__',
			     ),
    
    'islandora_gis_popup' => array(
				   'variables' => array('islandora_object' => NULL, 'islandora_metadata_fields' => array()),
				   'file' => 'theme/theme.inc',
				   'template' => 'theme/islandora-gis-popup',
				   'pattern' => 'islandora_gis_popup__',
				   ),
	       );
}

function islandora_gis_theme_registry_alter($registry) {

  //dpm(array_keys($registry));
  //dpm($registry['openlayers_map']);
}

/**
 * Set the ID of a Feature linked to a given Islandora Object
 * @todo Migrate to islandora_gis_geoserver
 *
 */
function islandora_gis_set_feature_id($object, $feature_id) {

  $ds_dc = $object['DC'];
  $dc_doc = new DOMDocument();
  $dc_doc->loadXML($ds_dc->content);

  $workspace_name = variable_get('geoserver_workspace', 'default');
  $workspace_name = empty($workspace_name) ? 'default' : $workspace_name;

  $dc_doc->documentElement->appendChild($dc_doc->createElementNS('http://purl.org/dc/elements/1.1/', 'dc:relation', htmlentities(geoserver_url() . $workspace_name . '/wfs?request=GetFeature&featureID=' . $feature_id)));
  $dc_doc->documentElement->appendChild( $dc_doc->createComment('This captures the WFS Feature ID of a related resource.') );

  //! @todo Cache the updated relationship

  return $ds_dc->setContentFromString($dc_doc->saveXml());
}

/**
 * Retrieve the ID of a Feature linked to a given Islandora Object
 * @todo Migrate to islandora_gis_geoserver
 */
function islandora_gis_get_feature_id($object) {

  module_load_include('inc', 'islandora', 'includes/utilities');

  //! @todo Cache the results

  $workspace_name = variable_get('geoserver_workspace', 'default');
  $workspace_name = empty($workspace_name) ? 'default' : $workspace_name;
  $feature_id_uri_fragment = geoserver_url() . $workspace_name . '/wfs?request=GetFeature&featureID=' . preg_replace('/\:/', '_', $object->id) . '.';

  $feature_id_uri_pattern = preg_quote($feature_id_uri_fragment);
  $feature_id_uri_pattern = preg_replace('/\\\/', '\\\\\\', $feature_id_uri_pattern);
  $feature_id_uri_pattern = preg_replace('/\//', '\\\\\\/', $feature_id_uri_pattern);

  $query = 'SELECT ?subject
     FROM <#ri>
     WHERE {
            ?subject <dc:relation> ?object .
            FILTER(regex(str(?object), "' . $feature_id_uri_pattern . '"))
     }';

  $query_array = array(
    'query' => $query,
    'type' => 'sparql',
    'pid' => $object->id,
  );

  $feature_map = array();

  try {

    $results = $object->repository->ri->query($query_array['query'], $query_array['type']);

    foreach($results as $result) {

      $image_object = islandora_object_load($result['subject']['value']);

      $dc_doc = new SimpleXMLElement($image_object['DC']->content);

      // Retrieve the URL for the related resource
      $dc_doc->registerXPathNamespace('http://purl.org/dc/elements/1.1/', 'dc');

      //dpm($dc_doc->asXml());
      $dc_relations = $dc_doc->xpath('//dc:relation[starts-with(text(), "' . geoserver_url() . '")]');

      $feature_id = NULL;
      //if(!empty($dc_relations)) {

      //$dc_relation = array_shift($dc_relations);
      foreach($dc_relations as $dc_relation) {

	if(preg_match('/featureID\=(.+)?/', (string) $dc_relation, $m)) {

	  $feature_id = $m[1];
	  $feature_map[$feature_id] = $image_object->id;
	}
      }
    }
  } catch (Exception $e) {

    drupal_set_message(t('Islandora Error getting related objects for %s', array('%s' => $object->id)), 'error');
  }

  return $feature_map;
}

/**
 * Functionality for the viewing collections of Shapefile Objects
 * (This permits the user to view each Shapefile as a separate vector layer)
 * Implements hook_CMODEL_PID_islandora_view_object().
 *
 */
function islandora_gis_islandora_collectionCModel_islandora_view_object($object) {

  $policy = new CollectionPolicy($object['COLLECTION_POLICY']->content);
  $policy_content_models = $policy->getContentModels();

  if(isset($policy_content_models['islandora:sp_shapefile_cmodel'])) {

    $members = islandora_basic_collection_get_objects($object);

    /*
    foreach ($members as $member) {

      $content_model = islandora_object_load($member['content']['value']);
      if (isset($rows[$content_model->id])) {

	$rows[$content_model->id][1]++;
      } else {

	$link = l($content_model->label, "islandora/object/{$content_model->id}");
	$rows[$content_model->id] = array($link, 1);
      }

      dpm($member);
    }
    */

    /*
    $member_objects = array_map(function($e) {

	return islandora_object_load($e['object']['value']);
      }, $members);
    */

    $islandora_feature_map = array();
    $member_objects = array();

    foreach($members as $member) {

      $object = islandora_object_load($member['object']['value']);
      $member_objects[] = $object;

      $islandora_feature_map = array_merge($islandora_feature_map, islandora_gis_get_feature_id($object));
    }

    variable_set('islandora_gis_geoserver_islandora_feature_map', $islandora_feature_map);

    $map_output = islandora_gis_render_objects($member_objects, $object->label);

    //module_load_include('inc', 'islandora_gis', 'includes/openlayers');

    //$map_output = islandora_gis_render_objects($members);
    $output = theme('islandora_gis', array('islandora_object' => $object, 'islandora_content' => $map_output));
    return array('' => $output);
  }
}

/*
function islandora_basic_collection_islandora_collectionCModel_islandora_view_object(FedoraObject $object) {

  $output = theme('islandora_basic_collection_wrapper', array('islandora_object' => $object));
  return array('Collection View' => $output);
}
 */

function islandora_gis_render_objects($objects, $map_title) {

  module_load_include('inc', 'islandora_gis', 'includes/openlayers');

  $map = array();

  // Hook for islandora_gis_map_load_preprocess_alter
  drupal_alter('islandora_gis_map_load_preprocess', $map);

  // Work-around for cases in which a single Object instance is passed
  if(!is_array($objects)) {

    $objects = array($objects);
  }

  // Functionality for islandora_gis_geoserver
  // @todo Refactor with hooks
  //variable_set('islandora_gis_view_object_pid', $object->id);
  /*
  variable_set('islandora_gis_view_object_pids', array_map(function($object) {

	return $object->id;
      }, $objects));
  */

  //$map = islandora_gis_map_load($object);
  $map = array_merge($map, islandora_gis_map_load($objects, $map_title));

  foreach($objects as $object) {

    variable_set('islandora_gis_view_object_pids', array($object->id));

    // Hook for islandora_gis_map_load_alter
    drupal_alter('islandora_gis_map_load', $map, count($objects));
  }

  $map_output = islandora_gis_render_map_data($map);

  return $map_output;
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 *
 */
function islandora_gis_islandora_sp_shapefile_cmodel_islandora_view_object($object) {

  $map_output = islandora_gis_render_objects(array($object), $object->label);
  $output = theme('islandora_gis', array('islandora_object' => $object, 'islandora_content' => $map_output));
  return array('' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 *
 */
function islandora_gis_islandora_sp_shapefile_cmodel_islandora_object_ingested($object) {

  $ogr2ogr_bin_path = variable_get('islandora_gis_ogr2ogr_path', '/usr/bin/env ogr2ogr');
  //$topojson_bin_path = drupal_get_path('module', 'islandora_gis') . '/libraries/js/node_modules/topojson/bin/topojson';
  $topojson_bin_path = dirname(__DIR__) . '/islandora_gis/libraries/js/node_modules/topojson/bin/topojson';
  $geojson_bin_path = dirname(__DIR__) . '/islandora_gis/libraries/js/node_modules/topojson/bin/topojson-geojson';

  /**
   * Temporarily disabling integration with mapshaper due to issue GEO-37
   *
   */
  //$mapshaper_bin_path = dirname(__DIR__) . '/islandora_gis/libraries/js/node_modules/mapshaper/bin/mapshaper';
  //$processor = new ShapefileObjectProcessor($object, NULL, $ogr2ogr_bin_path, $topojson_bin_path, $mapshaper_bin_path);
  $processor = new ShapefileObjectProcessor($object, NULL, $ogr2ogr_bin_path, $topojson_bin_path, $geojson_bin_path);

  // Manually invoke the ShapefileProcessor methods for non-existent derivative datastreams
  //foreach(array('JSON' => 'GeoJson') as $dsid => $ds_label) {
  foreach(array('GML' => 'Geography Markup Language',
		'KML' => 'Keyhole Markup Language',
		'JSON' => 'GeoJson') as $dsid => $ds_label) {

    if(!isset($object[$dsid])) {

      $datastream_file = $processor->derive($dsid);

      $control_group = 'M';
      $mimetype = '';

      $label = $object->label . " ($ds_label)";

      // If this is an XML Document, set the datastream type to "Inline [X]ML"
      if(preg_match('/\.xml$/', $datastream_file)) {

	$control_group = 'X';
	$mimetype = 'application/xml';
	if(preg_match('/\.gml\.xml$/', $datastream_file)) {

	  $mimetype = 'application/gml+xml';
	} elseif(preg_match('/\.kml\.xml$/', $datastream_file)) {

	  $mimetype = 'application/vnd.google-earth.kml+xml';
	}
      } elseif(preg_match('/\.geojson\.json$/', $datastream_file)) {

	$mimetype = 'application/vnd.geo+json';
      }

      // @see islandora_prepare_new_object().
      $datastream = $object->constructDatastream($dsid, $control_group);
      $datastream->label = $label;
      $datastream->mimetype = $mimetype;

      $is_valid_url = filter_var($datastream_file, FILTER_VALIDATE_URL) === TRUE;

      switch ($control_group) {

      case 'M':

	/*
	if($is_valid_url) {

	  $datastream->setContentFromUrl($datastream_file);
	} else {

	  $datastream->setContentFromFile($datastream_file);
	}
	*/
	$datastream->setContentFromString(file_get_contents($datastream_file));
	break;

      case 'X':

	$datastream->setContentFromString(file_get_contents($datastream_file));
	break;
      }

      try {

	$object->ingestDatastream($datastream);
      } catch (Exception $e) {

	watchdog('islandora_gis', $e->getMessage(), NULL, WATCHDOG_ERROR);
	drupal_set_message(t('A problem occured while ingesting the datastream "@label" for @pid, please notify the administrator.', array('@label' => $label, '@pid' => $object->id)), 'error');
      }

      // @todo Refactor
      if($dsid == 'JSON') {
	
	$processor->simplify();
      }
    }
  }

  // For the FGDC metadata transformation
  $fgdc_ds = $object['FGDC'];
  //if(isset($fgdc_ds)) {
  if($fgdc_ds) {
    
    $xsl_file_path = dirname(__DIR__) . '/islandora_gis/libraries/xsl/fgdc2mods.xsl';
    $processor = new FgdcDatastreamProcessor($fgdc_ds, $xsl_file_path);
    $mods_file = $processor->transform();

    // @see islandora_prepare_new_object().
    $datastream = $object->constructDatastream('MODS', 'X');
    $datastream->label = 'MODS Document';
    $datastream->mimetype = 'application/xml';
    $datastream->setContentFromFile($mods_file);
    try {

      $object->ingestDatastream($datastream);
    } catch (Exception $e) {
      
      watchdog('islandora_gis', $e->getMessage(), NULL, WATCHDOG_ERROR);
      drupal_set_message(t('A problem occured while ingesting the datastream "@label" for @pid, please notify the administrator.', array('@label' => $label, '@pid' => $object->id)), 'error');
    }

    file_unmanaged_delete($mods_file);
  }
}


/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_gis_islandora_xml_form_builder_forms() {

  $module_path = drupal_get_path('module', 'islandora_gis');
  return array(
	       'Shapefile MODS-OGP form' => array('form_file' => "$module_path/xml/islandora_shapefile_mods_form.xml",
						  ),
	       );
}

/**
 * Implements hook_islandora_content_model_forms_form_associations().
 *
 */
function islandora_gis_islandora_content_model_forms_form_associations() {

  return array('islandora_shapefile_mods_form' => array('content_model' => 'islandora:sp_shapefile_cmodel',
							'form_name' => 'Shapefile MODS-OGP form',
							'dsid' => 'MODS',
							'title_field' => array('titleInfo', 'title'),
							'transform' => 'mods_to_dc.xsl',
							'template' => FALSE,
							),
	       );
}

/**
 * Function for determining whether or not a given Islandora Large Image Object manages an image in the GeoTIFF
 *
 */
function islandora_gis_object_has_exif_directory($object, $exif_directory) {

  $args = array('/usr/bin/env exiftool', '-m', "-'" . $exif_directory . '"', $image_file_path);
  $invocation = escapeshellcmd(implode(' ', $args));
  $output = passthru($invocation);

  $lines = split("\n", $output);

  return empty($output) or (preg_match('/Warning/', $output) and count($lines) == 1);
}

function islandora_gis_gdalinfo() {

  $args = array_merge(array('/usr/bin/env gdalinfo'), func_get_args());
  $invocation = escapeshellcmd(implode(' ', $args));

  $output = array();
  $return = exec($invocation, $output);
  
  $output = implode(PHP_EOL, $output);
  
  // Parse the output
  $lines = explode("/\n", $output);

  $data = array();

  //! @todo Extend for the parsing of unit, zunit, and elevation attributes
  $fields = array('xmin' => '/Upper Left  \(([\-0-9\.]+),/',
		  'ymin' => '/Upper Left  \([\-0-9\.]+, ([\-0-9\.]+)\)/',
		  'xmax' => '/Lower Right \(([\-0-9\.]+),/',
		  'ymax' => '/Lower Right \([\-0-9\.]+, ([\-0-9\.]+)\)/',
		  'projection' => '/Coordinate System is\:' . PHP_EOL . 'PROJCS\["(.+?)",/',
		  );
  
  foreach($fields as $field_name => $field_pattern) {

    if(preg_match($field_pattern, $output, $m)) {
      
      $data[$field_name] = $m[1];
    }
  }

  return $data;
}

/**
 * Using the GDAL, parse the GeoTIFF and update the Dublin Core Document with the necessary data
 *
*/
function islandora_gis_object_update_georeferenced($object) {

  // Retrieve the GeoTIFF
  //$file_path = file_unmanaged_save_data($object['OBJ']->content, 'temporary://islandora_gis_' . preg_replace('/\:/', '_', $object->id) . '.tiff');
  $file_path = '/tmp/islandora_gis_' . preg_replace('/\:/', '_', $object->id) . '.tiff';
  $object['OBJ']->getContent($file_path);

  GDALAllRegister();

  // Parse the GeoTIFF as a raster data set
  $dataset = GDALOpen($file_path, GA_ReadOnly);
  if($dataset and !islandora_gis_object_is_georeferenced($object)) {

    // Retrieve the SRS from the WKT
    $srs = new OGRSpatialReference($dataset->GetProjectionRef());

    $dc_doc = new DOMDocument();
    $dc_doc->loadXML($object['DC']->content);

    /**
     * Due to the certain limitations of php5-gdal, these values must be parsed from the output streamed to STDOUT
     *
     */

    /*
    // Iterate through all layers for the data set
    for($i=0;$i < $dataset->GetLayerCount(); $i++) {

      $layer = $dataset->getLayer($i);

      //! @todo Integrate parsing for the zunit and elevation values
      $dcmi_point = 'east=' . $layer->GetExtent()->minX . '; north=' . $layer->GetExtent()->minY . '; units=' . $srs->GetAttrValue('UNIT') . '; projection=' . $srs->GetAttrValue('PROJCS') . " name=" . $layer->GetName();
      $dc_doc->dc->addChild('dc:coverage', $dcmi_point);
    }
    */

    $data = islandora_gis_gdalinfo($file_path);

    $dcmi_point = 'east=' . $data['xmin'] . '; north=' . $data['ymax'] . '; projection=' . $data['projection'] . "; name=" . $object->label;
    $dc_doc->documentElement->appendChild( $dc_doc->createElementNS('http://purl.org/dc/elements/1.1/', 'dc:coverage', $dcmi_point) );

    $bbox = 'xmin=' . $data['xmin'] . '; ymin=' . $data['ymin'] . '; xmax=' . $data['xmax'] . '; ymax=' . $data['ymax'];
    $bbox_elem = $dc_doc->createElementNS('http://purl.org/dc/elements/1.1/', 'dc:coverage', $bbox);
    $dc_doc->documentElement->appendChild( $bbox_elem );
    $dc_doc->documentElement->appendChild( $dc_doc->createComment('This models the bounding box generated from the digital surrogate in the GeoTIFF.') );

    //file_unmanaged_delete($file_path);
    unlink($file_path);

    $object['DC']->setContentFromString($dc_doc->saveXml());
  }
}

/**
 * Determine whether or not an Object has been georeferenced
 * Please note that this requires that a dc:coverage element bearing a DCMI point as a value has been appended to the Dublin Core Document for the Object
 *
 */
function islandora_gis_object_is_georeferenced($object, $exif_directory = 'GTModelType') {

  $dc_doc = new SimpleXmlElement($object['DC']->content);
  $dc_doc->registerXPathNamespace('http://purl.org/dc/elements/1.1/', 'dc');

  // Test for DCMI points within the Dublin Core metadata
  // If these haven't been encoded, ignore them
  $dc_type = $dc_doc->xpath('//dc:coverage[starts-with(text(), "east=")]');

  return !empty($dc_type);
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 * Update the Dublin Core Document for GeoTIFF's
 *
 */
function islandora_gis_islandora_sp_large_image_cmodel_islandora_object_ingested($object) {

  return islandora_gis_object_update_georeferenced($object);
}
